{
"AWSTemplateFormatVersion" : "2010-09-09",
"Description" : "Application Stack",
"Metadata": {
"AWS::CloudFormation::Interface": {
  "ParameterGroups": [
    {
      "Label": {
        "default": "Web ACL Name for Common Attack Protection"
      },
      "Parameters": [
        "WebACLName"
      ]
    }
  ],
  "ParameterLabels": {
    "WebACLName": {
      "default": "Name"
    }
  }
}
},
  "Parameters": {
    "vpcTag": {
      "Type": "String"
    },
    "vpcid" : {
    "Type" : "String"
    },
    "stackName":{
      "Type":"String"
    },
    "igTag" : {
      "Type" : "String"
    },
    "publicRouteTableTag" : {
      "Type" : "String"
    },
    "privateRouteTableTag" : {
      "Type" : "String"
    },
    "s3Domain" : {
    "Type" : "String"
    },
    "domainname" : {
    "Description" : "Domain Name",
    "Type" : "String"
  },
  "lambdaArn" : {
   "Description" : "Lamda Function ARN",
   "Type" : "String"
 },
 "ec2SecurityGroup" : {
  "Description" : "SG Resource ID for LB",
  "Type" : "String"
},
    "iaminstance" : {
    "Description" : "Instance Profile Name for CodeDeploy to S3",
    "Type" : "String"
  },
   "MySNSTopic" :{
     "Description" : "MySNSTopic",
     "Type" : "String",
     "Default":"passwword_reset"
   },
   "SSLArn" : {
    "Description" : "SSL Arn",
    "Type" : "String"

  },
  "subnet1" : {
    "Description" : "EC2 Subnet ID 1 for LB",
    "Type" : "String"
  },
  "subnet2" : {
    "Description" : "EC2 Subnet ID 2 for LB",
    "Type" : "String"
  },

  "subnet3" : {
    "Description" : "EC2 Subnet ID 3 for LB",
    "Type" : "String"
  },
  "secuitygroupglb" : {
    "Description" : "LoadBalancer SG",
    "Type" : "String"

  },
  "codedeployRole":{
    "Description" : "Code Deploy Service Role",
    "Type" : "String"
  },
  "appname" : {
    "Description" : "Application Name",
    "Type" : "String"

  },
  "depname" : {
    "Description" : "Deployment Group Name",
    "Type" : "String"
  },
  "dbsubnet" : {
    "Description" : "Dbsubnet Group Name",
    "Type" : "String"
  },
  "dbSecurityGroupId":{
    "Description" : "DB SG Resource ID for LB",
    "Type" : "String"
  },

  "WebACLName": {
    "Type": "String",
    "Default": "CommonAttackProtection",
    "Description": "Enter the name you want to use for the WebACL. This value is also added as a prefix for the names of the rules, conditions, and CloudWatch metrics created by this template."
  },
  "DBUsername" : {
             "Default" : "csye6225master",
             "Description" : "The database admin account username",
             "Type": "String",
             "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
         },
         "DBPassword" : {
             "Default": "csye6225password",
             "Description" : "The database admin account password",
             "Type": "String",
             "AllowedPattern" : "[a-zA-Z0-9]*"
         }
  },
  "Resources" :
  {
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : [{"Ref": "subnet1"},{"Ref": "subnet2"},{"Ref": "subnet3"}],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "MinSize" : "3",
        "MaxSize" : "10",
        "DesiredCapacity":"3",
        "Cooldown":"60",
        "Tags" : [ {
         "Key" : "Name",
         "Value" : "MyEC2Instance",
         "PropagateAtLaunch" : "true"
         }
       ],
        "TargetGroupARNs" : [ { "Ref" : "ALBTargetGroup" } ]
      }
    },



"LaunchConfiguration": {
             "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress":true,
                "ImageId": "ami-9887c6e7",
                "InstanceType": "t2.micro",
                "SecurityGroups" : [{"Ref" : "ec2SecurityGroup"}],
                "KeyName": "KeyName",
                "IamInstanceProfile": {"Ref":"iaminstance"},
                "BlockDeviceMappings": [
                 {
                   "DeviceName" : "/dev/sda1",
                   "Ebs" : {
                     "VolumeType": "gp2",
                     "DeleteOnTermination" : "true",
                     "VolumeSize": "20"
                   }
                 }
               ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            ["#!/bin/bash -xe ",
			                        	"sudo su",
                                "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                                "systemctl start ntpd",
                                "systemctl enable ntpd",
                                "cd /home/centos/",
                                "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                                "chmod +x ./install",
                                "./install auto",
                                "groupadd tomcat",
                                "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                                "cd /tmp",
                                "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                                "mkdir /opt/tomcat",
                                "tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                                "cd /opt/tomcat",
                                "chgrp -R tomcat /opt/tomcat",
                                "chmod -R g+r conf",
                                "chmod g+x conf",
                                "chown -R tomcat webapps/ work/ temp/ logs/",
                                "cd /usr/lib/systemd/system",
                                "touch tomcat.service",
                                "echo '[Unit]' > tomcat.service",
                                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                                "echo 'After=syslog.target network.target' >> tomcat.service",
                                "echo '[Service]' >> tomcat.service",
                                "echo 'Type=forking' >> tomcat.service",
                                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                                "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\"' >> tomcat.service",
                                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                                "echo 'User=tomcat' >> tomcat.service",
                                "echo 'Group=tomcat' >> tomcat.service",
                                "echo 'UMask=0007' >> tomcat.service",
                                "echo 'RestartSec=10' >> tomcat.service",
                                "echo 'Restart=always' >> tomcat.service",
                                "echo '[Install]' >> tomcat.service",
                                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                                "echo '#!/bin/sh' >> /opt/tomcat/bin/setenv.sh",
                                {
                                 "Fn::Join": [
                                  "",
                                [
                                "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=\"jdbc:mysql://",
                                {
                                 "Fn::GetAtt": [
                                    "RDSDB",
                                    "Endpoint.Address"
                                 ]
                                 },
                                  ":3306/csye6225\"\"'>> /opt/tomcat/bin/setenv.sh \n"
                                     ]
                  ]
                },

                {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "sudo echo TOPIC_ARN=",
                                                    {"Ref": "MySNSTopic"},
                                                    " >> /opt/tomcat/bin/setenv.sh \n"
                                                ]
                                            ]
                                        },

                       {
                            "Fn::Join": [
                                "",
                                [
                                    "sudo echo EMAIL_SOURCE=noreply@",
                                    {"Ref" : "domainname"},
                                    " >> /opt/tomcat/bin/setenv.sh \n"
                                ]
                            ]
                        },
                        {
                            "Fn::Join": [
                                "",
                                [
                                    "sudo echo DDB_TABLE=",
                                    {"Ref" : "stackName"},
                                    "-csye6225-dynamodb-table",
                                    " >> /opt/tomcat/bin/setenv.sh \n"
                                ]
                            ]
                        },
                {"Fn::Join":["",["sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=s3developement\"'>> /opt/tomcat/bin/setenv.sh\n"]]},
                {"Fn::Join":["",["sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=",{"Ref":"DBUsername"},"\"' >> /opt/tomcat/bin/setenv.sh\n"]]},
                {"Fn::Join":["",["sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=",{"Ref":"DBPassword"},"\"' >> /opt/tomcat/bin/setenv.sh\n"]]},
                {"Fn::Join":["",["sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dbucket.name=",{"Ref":"s3Domain"},"\"' >> /opt/tomcat/bin/setenv.sh\n"]]},

                                             "chmod +x /opt/tomcat/bin/setenv.sh",
                                             "systemctl daemon-reload",
                                             "systemctl enable tomcat.service",
                                             "systemctl start tomcat.service",



                                             "cd /opt/",
                                             "touch cloudwatch-config.json",
		          "echo '{\"agent\":{' >> cloudwatch-config.json",
	 	          "echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
		          "echo '\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"' >> cloudwatch-config.json",
		          "echo '},' >> cloudwatch-config.json",
		          "echo '\"logs\":{\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/opt/tomcat/logs/csye6225.log\",\"log_group_name\": \"csye6225_fall2018\",\"log_stream_name\": \"webapp\"}]}},\"log_stream_name\": \"cloudwatch_log_stream\"},' >> cloudwatch-config.json",
		          "echo '\"metrics\":{' >> cloudwatch-config.json",
		          "echo '\"metrics_collected\":{' >> cloudwatch-config.json",
		          "echo '\"statsd\":{' >> cloudwatch-config.json",
		          "echo '\"service_address\":\":8125\", \"metrics_collection_interval\":10, \"metrics_aggregation_interval\":0 }}}}' >> cloudwatch-config.json",
              "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
              "rpm -U ./amazon-cloudwatch-agent.rpm",
		          "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s",

              "systemctl enable amazon-cloudwatch-agent.service",
              "systemctl start amazon-cloudwatch-agent.service",
              "systemctl daemon-reload",
              "systemctl enable amazon-cloudwatch-agent.service",
              "systemctl start amazon-cloudwatch-agent.service",
              "systemctl enable tomcat.service",
              "systemctl start tomcat.service"




                            ]
                        ]
                    }
                }
            },
            "DependsOn" : "RDSDB"
        }
    ,

    "WebServerScaleUpPolicy" : {
         "Type" : "AWS::AutoScaling::ScalingPolicy",
         "Properties" : {
           "AdjustmentType" : "ChangeInCapacity",
           "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
           "Cooldown" : "60",
           "ScalingAdjustment" : "1"
         }
       },
       "WebServerScaleDownPolicy" : {
         "Type" : "AWS::AutoScaling::ScalingPolicy",
         "Properties" : {
           "AdjustmentType" : "ChangeInCapacity",
           "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
           "Cooldown" : "60",
           "ScalingAdjustment" : "-1"
         }
       },
       "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
               "AlarmDescription": "Scale-up if CPU > 10% for 1 minutes",
               "MetricName": "CPUUtilization",
               "Namespace": "AWS/EC2",
               "Statistic": "Average",
               "Period": "60",
               "EvaluationPeriods": "1",
               "Threshold": "10",
               "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
               "Dimensions": [
                 {
                   "Name": "AutoScalingGroupName",
                   "Value": { "Ref": "WebServerGroup" }
                 }
               ],
               "ComparisonOperator": "GreaterThanThreshold"
             }
           },
           "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
               "AlarmDescription": "Scale-down if CPU < 5% for 1 minutes",
               "MetricName": "CPUUtilization",
               "Namespace": "AWS/EC2",
               "Statistic": "Average",
               "Period": "60",
               "EvaluationPeriods": "1",
               "Threshold": "8",
               "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
               "Dimensions": [
                 {
                   "Name": "AutoScalingGroupName",
                   "Value": { "Ref": "WebServerGroup" }
                 }
               ],
               "ComparisonOperator": "LessThanThreshold"
             }
           },


        "ApplicationLoadBalancer" : {
        "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
        "Properties" : {
          "Name":"ApplicationLoadBalancer",
          "Subnets" : [{"Ref": "subnet1"},{"Ref": "subnet2"},{"Ref": "subnet3"}],
          "SecurityGroups": [{"Ref": "secuitygroupglb"}]
        }
      },

      "MyWebACLAssociation": {

        "Type": "AWS::WAFRegional::WebACLAssociation",
        "DependsOn":["ApplicationLoadBalancer","MyWebACL"],
        "Properties": {
            "ResourceArn": { "Ref": "ApplicationLoadBalancer" },
            "WebACLId": { "Ref": "MyWebACL" }
        }
    },

      "ALBListener" : {
       "Type" : "AWS::ElasticLoadBalancingV2::Listener",
       "Properties" : {
         "DefaultActions" : [{
           "Type" : "forward",
           "TargetGroupArn" : { "Ref" : "ALBTargetGroup" }
         }],
         "Certificates" : [{"CertificateArn":{"Ref" : "SSLArn"}}],
         "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
         "Port" : "443",
         "Protocol" : "HTTPS"
       }
     },

     "ALBTargetGroup" : {
    "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
    "Properties" : {
      "Name" : "ALBTargetGroup",
      "HealthCheckIntervalSeconds" : 30,
      "HealthCheckTimeoutSeconds" : 5,
      "HealthyThresholdCount" : 3,
      "HealthCheckPath":"/",
      "HealthCheckPort":8080,
      "Port" : 8080,
      "Protocol" : "HTTP",
      "UnhealthyThresholdCount" : 10,
      "TargetGroupAttributes" : [
          {"Key" : "deregistration_delay.timeout_seconds",
          "Value" : "20"}
      ],
      "VpcId" : {"Ref" : "vpcid"}

    }
  },

  "S3" : {
     "Type" : "AWS::S3::Bucket",
     "Properties" : {
       "BucketName" :{"Ref" : "s3Domain"}
     }
     },
     "DynamoDBTable": {
     "Type" : "AWS::DynamoDB::Table",
     "Properties" : {
       "AttributeDefinitions" : [
         {"AttributeName" : "id", "AttributeType" : "S"}
       ],
       "KeySchema" : [
         {"AttributeName" : "id", "KeyType" : "HASH"}
       ],
       "ProvisionedThroughput" : {
         "ReadCapacityUnits" : 5,
         "WriteCapacityUnits" : 5
       },
       "TimeToLiveSpecification":{
       "AttributeName" : "ttl",
       "Enabled" : true
       },
       "TableName": {"Fn::Join" : ["",[{"Ref" : "stackName"},"-csye6225-dynamodb-table"]] }
     }
   },

      "RDSDB" :{
        "Type" : "AWS::RDS::DBInstance",
        "Properties" :
          {
            "AllocatedStorage" : "5",
            "DBInstanceClass" : "db.t2.medium",
            "DBInstanceIdentifier" :{"Fn::Join" : ["",[{"Ref" : "stackName"},"-csye6225-fall2018-db-instance"]] },
            "DBSubnetGroupName" :{"Ref" : "dbsubnet"},
            "DBName" : "csye6225",
            "Engine" : "mysql",
            "EngineVersion" : "5.6.37",
            "MasterUsername" : "csye6225master",
            "MasterUserPassword" : "csye6225password",
            "MultiAZ" : "false",
            "PubliclyAccessible" : "false",
            "VPCSecurityGroups": [{"Ref": "dbSecurityGroupId"}]
          }

  },

  "CodeDeployApplication": {
     "Type": "AWS::CodeDeploy::Application",
     "Properties": {
       "ApplicationName" : {"Ref" : "appname"}
     }
   },



   "CodeDeployDeploymentGroup":{
      "Type":"AWS::CodeDeploy::DeploymentGroup",
      "Properties":{
         "ApplicationName":{
            "Ref":"CodeDeployApplication"
         },
         "AutoScalingGroups" : [ {"Ref" : "WebServerGroup" } ],
         "Ec2TagFilters":[
            {
               "Key":"Name",
               "Value":"MyEC2Instance",
               "Type":"KEY_AND_VALUE"
            }
         ],
         "LoadBalancerInfo": {
          "ElbInfoList": [{
            "Name": {"Fn::GetAtt": ["ApplicationLoadBalancer", "LoadBalancerName"]}
          }]
        },
         "ServiceRoleArn":{"Ref":"codedeployRole"},
         "DeploymentGroupName":{
            "Ref":"depname"
         }
      }
   },
  "MyRecordSet": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneName" : {"Fn::Join" : ["",[{"Ref" : "domainname"},"."]] },
        "Name": {"Fn::Join" : ["",["www.",{"Ref" : "domainname"},"."]] },
        "Type": "A",
        "AliasTarget": {
            "HostedZoneId" : {"Fn::GetAtt": ["ApplicationLoadBalancer", "CanonicalHostedZoneID"]},
            "DNSName": {"Fn::GetAtt": ["ApplicationLoadBalancer", "DNSName"]},
            "EvaluateTargetHealth": "false"
        }
      }
    },

    "MyWebACL": {
      "Type": "AWS::WAFRegional::WebACL",
       "DependsOn" : ["myIPSetRule"],
      "Properties": {
        "Name": { "Ref" : "WebACLName" },
        "DefaultAction": {
          "Type": "ALLOW"
        },
        "MetricName": { "Ref" : "WebACLName" },
        "Rules": [
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 1,
            "RuleId": {
              "Ref": "ManualIPBlockRule"
            }
          },
          {
            "Action": {
              "Type": "COUNT"
            },
            "Priority": 2,
            "RuleId": {
              "Ref": "SizeMatchRule"
            }
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 3,
            "RuleId": {
              "Ref": "SqliRule"
            }
          },
          {
            "Action": {
              "Type": "BLOCK"
            },
            "Priority": 4,
            "RuleId": {
              "Ref": "XssRule"
            }
          }
        ]
      }
    },

    "myIPSetRule" : {

        "Type": "AWS::WAFRegional::Rule",

        "DependsOn" : ["myIPSetBlacklist"],

        "Properties": {
            "Name": "myIPSetRule",
            "MetricName" : "myIPSetRule",
            "Predicates": [
            {
                "DataId" : {"Ref":"myIPSetBlacklist"},
                "Negated" : false,
                "Type" : "IPMatch"
            }
            ]
        }
    },

    "myIPSetBlacklist": {
        "Type": "AWS::WAFRegional::IPSet",
        "Properties": {
            "Name": "myIPSetBlacklist",
            "IPSetDescriptors": [
            {
                "Type" : "IPV4",
                "Value" : "155.33.135.37/32"
            },
            {
                "Type" : "IPV4",
                "Value" : "155.33.135.37/32"
            }
            ]
        }
    },

    "SqliRule": {
      "Properties": {
        "Name": { "Fn::Join" : [ "", [{ "Ref" : "WebACLName" }, "SqliRule"]] },
        "MetricName": { "Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "SqliRule"]] },
        "Predicates": [
          {
            "DataId": {
              "Ref": "SqliMatchSet"
            },
            "Negated": false,
            "Type": "SqlInjectionMatch"
          }
        ]
      },
      "Type": "AWS::WAFRegional::Rule"
    },
    "XssRule": {
      "Properties": {
        "Name": { "Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "XssRule"]] },
        "MetricName": { "Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "XssRule"]]},
        "Predicates": [
          {
            "DataId": {
              "Ref": "XssMatchSet"
            },
            "Negated": false,
            "Type": "XssMatch"
          }
        ]
      },
      "Type": "AWS::WAFRegional::Rule"
    },
    "SizeMatchRule": {
      "Properties": {
        "Name": { "Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "LargeBodyMatchRule"]] },
        "MetricName": { "Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "DetectLargeBody"]]},
        "Predicates": [
          {
            "DataId": {
              "Ref": "sizeRestrict"
            },
            "Negated": false,
            "Type": "SizeConstraint"
          }
        ]
      },
      "Type": "AWS::WAFRegional::Rule"
    },
    "ManualIPBlockRule": {
      "Properties": {
        "Name": { "Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "ManualIPBlockRule"]] },
        "MetricName": { "Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "ManualIPBlockRule"]]},
        "Predicates": [
          {
            "DataId": {
              "Ref": "WAFManualIPBlockSet"
            },
            "Negated": false,
            "Type": "IPMatch"
          }
        ]
      },
      "Type": "AWS::WAFRegional::Rule"
    },
    "WAFManualIPBlockSet": {
      "Properties": {
        "Name": "Manual IP Block Set"
      },
      "Type": "AWS::WAFRegional::IPSet"
    },
    "sizeRestrict": {
        "Type": "AWS::WAFRegional::SizeConstraintSet",
        "Properties": {
           "Name": "sizeRestrict",
           "SizeConstraints": [
              {
                 "FieldToMatch": {
                    "Type": "URI"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "512"
              },
              {
                 "FieldToMatch": {
                    "Type": "QUERY_STRING"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "1024"
              },
              {
                 "FieldToMatch": {
                    "Type": "BODY"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "20000"
              },
              {
                 "FieldToMatch": {
                    "Type": "HEADER",
                    "Data": "cookie"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "4096"
              }
           ]
        }
     },
    "SqliMatchSet": {
      "Type": "AWS::WAFRegional::SqlInjectionMatchSet",
      "Properties": {
        "Name": {"Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "SqliMatch"]]},
        "SqlInjectionMatchTuples": [
            {
               "FieldToMatch": {
                  "Type": "URI"
               },
               "TextTransformation": "URL_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "URI"
               },
               "TextTransformation": "HTML_ENTITY_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "QUERY_STRING"
               },
               "TextTransformation": "URL_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "QUERY_STRING"
               },
               "TextTransformation": "HTML_ENTITY_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "BODY"
               },
               "TextTransformation": "URL_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "BODY"
               },
               "TextTransformation": "HTML_ENTITY_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "HEADER",
                  "Data": "cookie"
               },
               "TextTransformation": "URL_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "HEADER",
                  "Data": "cookie"
               },
               "TextTransformation": "HTML_ENTITY_DECODE"
            }
         ]
      }
    },
    "XssMatchSet": {
      "Properties": {
        "Name": {"Fn::Join" : [ "", [{"Ref" : "WebACLName"}, "XssMatch"]]},
        "XssMatchTuples": [
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "URL_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
          },
          {
            "FieldToMatch": {
              "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
          }
        ]
      },
      "Type": "AWS::WAFRegional::XssMatchSet"
    }

},



  "Outputs": {


        "URL" : {
        "Description" : "The URL of the website",
        "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [
        "ApplicationLoadBalancer", "DNSName" ]}]]}
    }

  }


}
