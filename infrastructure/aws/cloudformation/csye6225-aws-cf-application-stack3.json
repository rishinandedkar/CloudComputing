{
"AWSTemplateFormatVersion" : "2010-09-09",
"Description" : "Application Stack",
  "Parameters": {
    "vpcTag": {
      "Type": "String"
    },
    "stackName":{
      "Type":"String"
    },
    "igTag" : {
      "Type" : "String"
    },
    "publicRouteTableTag" : {
      "Type" : "String"
    },
    "privateRouteTableTag" : {
      "Type" : "String"
    },
    "webSubnetTag" : {
      "Type" : "String"
    },
    "dbSubnetTag" : {
      "Type" : "String"
    },
    "webServerSecurityGroupNameTag":
    {
      "Type" : "String"
    },
    "dbSecurityGroupNameTag" : {
      "Type" : "String"
    },
    "s3Domain" : {
    "Type" : "String"
    },
    "domainname" : {
    "Description" : "Domain Name",
    "Type" : "String"
  },
  "lambdaArn" : {
   "Description" : "Lamda Function ARN",
   "Type" : "String"
 },
    "iaminstance" : {
    "Description" : "Instance Profile Name for CodeDeploy to S3",
    "Type" : "String"
  },
   "MySNSTopic" :{
     "Description" : "MySNSTopic",
     "Type" : "String",
     "Default":"passwword_reset"
   },

  "DBUsername" : {
             "Default" : "csye6225master",
             "Description" : "The database admin account username",
             "Type": "String",
             "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
         },
         "DBPassword" : {
             "Default": "csye6225password",
             "Description" : "The database admin account password",
             "Type": "String",
             "AllowedPattern" : "[a-zA-Z0-9]*"
         }
  },
  "Resources" :
  {

     "webServerSecurityGroup": {
       "Type": "AWS::EC2::SecurityGroup",
       "Properties": {
       "GroupName": {"Ref" : "webServerSecurityGroupNameTag"},
       "GroupDescription": "Enable HTTP access via port 80, SSH access via port 22",
       "SecurityGroupIngress" : [{
                   "IpProtocol" : "tcp",
                   "FromPort": 22,
                   "ToPort" : 22,
                   "CidrIp" : "0.0.0.0/0"
               },

               {
                   "IpProtocol" : "tcp",
                   "FromPort": 8080,
                   "ToPort" : 8080,
                   "CidrIp" : "0.0.0.0/0"
               },

               {
                   "IpProtocol" : "tcp",
                   "FromPort": 443,
                   "ToPort" : 443,
                   "CidrIp" : "0.0.0.0/0"
               },
               {
                   "IpProtocol" : "tcp",
                   "FromPort": 3306,
                   "ToPort" : 3306,
                   "CidrIp" : "0.0.0.0/0"
               }
               ],
         "VpcId" : {"Fn::ImportValue" : "csye6225-cloud-Networking-VPC"}
       }
     },
     "dbSecurityGroup" : {

      "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupName" : {"Ref" : "dbSecurityGroupNameTag"},
          "GroupDescription" : "Security tag for web server",
          "SecurityGroupIngress" : [
            {
              "SourceSecurityGroupId" : {"Ref":"webServerSecurityGroup"},
              "FromPort" : 3306,
              "IpProtocol" : "tcp",
              "ToPort" : 3306
            }
           ],
          "VpcId" :{"Fn::ImportValue" : "csye6225-cloud-Networking-VPC"}
       }
     },

 "DBSubnetGroup" : {
  "Type" : "AWS::RDS::DBSubnetGroup",
  "Properties" : {
     "DBSubnetGroupDescription" : "DB Subnet Group",
     "DBSubnetGroupName" : {"Fn::Join" : ["",[{"Ref" : "stackName"},"-csye6225-db-subnetgroup"]] },
     "SubnetIds" : [ {"Fn::ImportValue" : "csye6225-cloud-Networking-db-subnet1Id"},{"Fn::ImportValue" : "csye6225-cloud-Networking-db-subnet2Id"}]}

},

"EC2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-9887c6e7",
                "InstanceType": "t2.micro",
                "DisableApiTermination": "False",
                "SecurityGroupIds": [{"Ref" : "webServerSecurityGroup"}],
                "KeyName": "KeyName",
                "SubnetId" : {"Fn::ImportValue" : "csye6225-cloud-Networking-web-subnet1"},
                "Tenancy": "default",
                "IamInstanceProfile": {"Ref":"iaminstance"},
                "Tags": [{"Key" : "Name", "Value" : "MyEC2Instance"}],
                "BlockDeviceMappings": [
                 {
                   "DeviceName" : "/dev/sda1",
                   "Ebs" : {
                     "VolumeType": "gp2",
                     "DeleteOnTermination" : "true",
                     "VolumeSize": "20"
                   }
                 }
               ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            ["#!/bin/bash -xe ",
			                        	"sudo su",
                                "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                                "systemctl start ntpd",
                                "systemctl enable ntpd",
                                "cd /home/centos/",
                                "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                                "chmod +x ./install",
                                "./install auto",
                                "groupadd tomcat",
                                "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                                "cd /tmp",
                                "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                                "mkdir /opt/tomcat",
                                "tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                                "cd /opt/tomcat",
                                "chgrp -R tomcat /opt/tomcat",
                                "chmod -R g+r conf",
                                "chmod g+x conf",
                                "chown -R tomcat webapps/ work/ temp/ logs/",
                                "cd /usr/lib/systemd/system",
                                "touch tomcat.service",
                                "echo '[Unit]' > tomcat.service",
                                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                                "echo 'After=syslog.target network.target' >> tomcat.service",
                                "echo '[Service]' >> tomcat.service",
                                "echo 'Type=forking' >> tomcat.service",
                                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                                "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\"' >> tomcat.service",
                                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                                "echo 'User=tomcat' >> tomcat.service",
                                "echo 'Group=tomcat' >> tomcat.service",
                                "echo 'UMask=0007' >> tomcat.service",
                                "echo 'RestartSec=10' >> tomcat.service",
                                "echo 'Restart=always' >> tomcat.service",
                                "echo '[Install]' >> tomcat.service",
                                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                                "echo '#!/bin/sh' >> /opt/tomcat/bin/setenv.sh",
                                {
                                 "Fn::Join": [
                                  "",
                                [
                                "echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=\"jdbc:mysql://",
                                {
                                 "Fn::GetAtt": [
                                    "RDSDB",
                                    "Endpoint.Address"
                                 ]
                                 },
                                  ":3306/csye6225\"\"'>> /opt/tomcat/bin/setenv.sh \n"
                                     ]
                  ]
                },

                {
                                            "Fn::Join": [
                                                "",
                                                [
                                                    "sudo echo TOPIC_ARN=",
                                                    {"Ref": "MySNSTopic"},
                                                    " >> /opt/tomcat/bin/setenv.sh \n"
                                                ]
                                            ]
                                        },

                       {
                            "Fn::Join": [
                                "",
                                [
                                    "sudo echo EMAIL_SOURCE=noreply@",
                                    {"Ref" : "domainname"},
                                    " >> /opt/tomcat/bin/setenv.sh \n"
                                ]
                            ]
                        },
                        {
                            "Fn::Join": [
                                "",
                                [
                                    "sudo echo DDB_TABLE=",
                                    {"Ref" : "stackName"},
                                    "-csye6225-dynamodb-table",
                                    " >> /opt/tomcat/bin/setenv.sh \n"
                                ]
                            ]
                        },
                {"Fn::Join":["",["sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=s3developement\"'>> /opt/tomcat/bin/setenv.sh\n"]]},
                {"Fn::Join":["",["sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=",{"Ref":"DBUsername"},"\"' >> /opt/tomcat/bin/setenv.sh\n"]]},
                {"Fn::Join":["",["sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=",{"Ref":"DBPassword"},"\"' >> /opt/tomcat/bin/setenv.sh\n"]]},
                {"Fn::Join":["",["sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dbucket.name=",{"Ref":"s3Domain"},"\"' >> /opt/tomcat/bin/setenv.sh\n"]]},

                                             "chmod +x /opt/tomcat/bin/setenv.sh",
                                             "systemctl daemon-reload",
                                             "systemctl start cloudwatch.service",
                                             "systemctl enable cloudwatch.service",
                                             "systemctl enable tomcat.service",
                                             "systemctl start tomcat.service",

                                             "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
		          "rpm -U ./amazon-cloudwatch-agent.rpm",
                  "cd /opt/",
                  "touch cloudwatch-config.json",
		          "echo '{\"agent\":{' >> cloudwatch-config.json",
	 	          "echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
		          "echo '\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"' >> cloudwatch-config.json",
		          "echo '},' >> cloudwatch-config.json",
		          "echo '\"logs\":{\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/opt/tomcat/logs/csye6225.log\",\"log_group_name\": \"csye6225_fall2018\",\"log_stream_name\": \"webapp\"}]}},\"log_stream_name\": \"cloudwatch_log_stream\"},' >> cloudwatch-config.json",
		          "echo '\"metrics\":{' >> cloudwatch-config.json",
		          "echo '\"metrics_collected\":{' >> cloudwatch-config.json",
		          "echo '\"statsd\":{' >> cloudwatch-config.json",
		          "echo '\"service_address\":\":8125\", \"metrics_collection_interval\":10, \"metrics_aggregation_interval\":0 }}}}' >> cloudwatch-config.json",
		          "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s",





                            ]
                        ]
                    }
                }
            },
            "DependsOn" : "RDSDB"
        }
    ,

  "S3" : {
     "Type" : "AWS::S3::Bucket",
     "Properties" : {
       "BucketName" :{"Ref" : "s3Domain"}
     }
     },
     "DynamoDBTable": {
     "Type" : "AWS::DynamoDB::Table",
     "Properties" : {
       "AttributeDefinitions" : [
         {"AttributeName" : "id", "AttributeType" : "S"}
       ],
       "KeySchema" : [
         {"AttributeName" : "id", "KeyType" : "HASH"}
       ],
       "ProvisionedThroughput" : {
         "ReadCapacityUnits" : 5,
         "WriteCapacityUnits" : 5
       },
       "TimeToLiveSpecification":{
       "AttributeName" : "ttl",
       "Enabled" : true
       },
       "TableName": {"Fn::Join" : ["",[{"Ref" : "stackName"},"-csye6225-dynamodb-table"]] }
     }
   },

      "RDSDB" :{
        "Type" : "AWS::RDS::DBInstance",
        "Properties" :
          {
            "AllocatedStorage" : "5",
            "DBInstanceClass" : "db.t2.medium",
            "DBInstanceIdentifier" :{"Fn::Join" : ["",[{"Ref" : "stackName"},"-csye6225-fall2018-db-instance"]] },
            "DBSubnetGroupName" :{"Ref" : "DBSubnetGroup"},
            "DBName" : "csye6225",
            "Engine" : "mysql",
            "EngineVersion" : "5.6.37",
            "MasterUsername" : "csye6225master",
            "MasterUserPassword" : "csye6225password",
            "MultiAZ" : "false",
            "PubliclyAccessible" : "false",
            "VPCSecurityGroups": [{"Ref": "dbSecurityGroup"}]
          }
      }





  },

  "Outputs": {

    "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "EC2Instance"
            }
        },
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "AvailabilityZone"
                ]
            }
        },
        "PublicDNS": {
            "Description": "Public DNSName of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "PublicDnsName"
                ]
            }
        },
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance",
                    "PublicIp"
                ]
            }
        }
  }
}
